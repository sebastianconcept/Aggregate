'From Pharo3.0 of 18 March 2013 [Latest update: #30787] on 5 March 2014 at 5:40:24.976217 pm'!Object subclass: #ConfigurationOfAggregate	instanceVariableNames: 'project'	classVariableNames: 'LastVersionLoad'	poolDictionaries: ''	category: 'ConfigurationOfOmniBase'!!ConfigurationOfAggregate commentStamp: '<historical>' prior: 0!!!ConfigurationOfAggregate methodsFor: 'symbolic versions' stamp: 'sebastiansastre 3/5/2014 17:34'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'pharo3.x' version: '1.1'! !!ConfigurationOfAggregate methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfAggregate methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!project	^ project		ifNil: [ 			| constructor |				"Bootstrap Metacello if it is not already loaded"			(self class baseConfigurationClassIfAbsent: [  ]) ensureMetacello.				"Construct Metacello project"			project := MetacelloMCProject new projectAttributes: self customProjectAttributes.			constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self project: project.			project loadType: #linear.	"change to #atomic if desired"			project ]! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:37'!baseline10: spec    <version: '1.0-baseline'>    	spec for: #squeakCommon do: [		spec blessing: #baseline.		spec project: 'OmniBase' with: [ spec				className: 'ConfigurationOfOmniBase';				file: 'ConfigurationOfOmniBase';				repository: 'http://squeaksource.com/MetacelloRepository'.				].	]! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:35'!version10: spec	<version: '1.0' imports: #('1.0-baseline')>		spec		for: #common		do: [ 			spec				blessing: #release;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Aggregate.git?protocol=git&branch=Pharo3.0&dir=src';				description: 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'.			spec package: 'Aggregate'.			 ].! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:37'!version11: spec	<version: '1.1' imports: #('1.1-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Aggregate.git?protocol=git&branch=Pharo3.0&dir=src';				description: 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'.			spec package: 'Aggregate'.			 ].! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:37'!baseline11: spec    <version: '1.0-baseline'>    	spec for: #common do: [		self class ensureGitFileTree.		spec blessing: #baseline.		spec project: 'OmniBase' with: [ spec				className: 'ConfigurationOfOmniBase';				file: 'ConfigurationOfOmniBase';				repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo30/main'.				].	]! !!ConfigurationOfAggregate methodsFor: 'versions' stamp: 'sebastiansastre 3/5/2014 17:33'!version01: spec	<version: '0.1' imports: #('0.1-baseline')>	spec		for: #'pharo3.x'		do: [ 			spec				blessing: #stable;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Aggregate.git?protocol=git&readOnly=1&branch=Pharo3.0';				description: 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'.			spec package: 'Aggregate' with: 'Aggregate-sebastiansastre.8' ]! !!ConfigurationOfAggregate methodsFor: 'symbolic versions' stamp: 'sebastiansastre 3/5/2014 17:34'!stable: spec	<symbolicVersion: #'stable'>	spec for: #'pharo3.x' version: '1.1'! !!ConfigurationOfAggregate methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!customProjectAttributes	 "Edit to return a collection of any custom attributes e.g. for conditional loading: Array with: #'Condition1' with: #'Condition2.	For more information see: http://code.google.com/p/metacello/wiki/CustomProjectAttrributes"	^ #().! !!ConfigurationOfAggregate methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!project	^ project		ifNil: [ 			| constructor |				"Bootstrap Metacello if it is not already loaded"			(self class baseConfigurationClassIfAbsent: [  ]) ensureMetacello.				"Construct Metacello project"			project := MetacelloMCProject new projectAttributes: self customProjectAttributes.			constructor := (Smalltalk at: #MetacelloVersionConstructor) on: self project: project.			project loadType: #linear.	"change to #atomic if desired"			project ]! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:37'!baseline10: spec    <version: '1.0-baseline'>    	spec for: #squeakCommon do: [		spec blessing: #baseline.		spec project: 'OmniBase' with: [ spec				className: 'ConfigurationOfOmniBase';				file: 'ConfigurationOfOmniBase';				repository: 'http://squeaksource.com/MetacelloRepository'.				].	]! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:35'!version10: spec	<version: '1.0' imports: #('1.0-baseline')>		spec		for: #common		do: [ 			spec				blessing: #release;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Aggregate.git?protocol=git&branch=Pharo3.0&dir=src';				description: 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'.			spec package: 'Aggregate'.			 ].! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:37'!version11: spec	<version: '1.1' imports: #('1.1-baseline')>	spec		for: #common		do: [ 			spec				blessing: #release;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Aggregate.git?protocol=git&branch=Pharo3.0&dir=src';				description: 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'.			spec package: 'Aggregate'.			 ].! !!ConfigurationOfAggregate methodsFor: 'as yet unclassified' stamp: 'sebastiansastre 3/5/2014 17:37'!baseline11: spec    <version: '1.0-baseline'>    	spec for: #common do: [		self class ensureGitFileTree.		spec blessing: #baseline.		spec project: 'OmniBase' with: [ spec				className: 'ConfigurationOfOmniBase';				file: 'ConfigurationOfOmniBase';				repository: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo30/main'.				].	]! !!ConfigurationOfAggregate methodsFor: 'versions' stamp: 'sebastiansastre 3/5/2014 17:33'!version01: spec	<version: '0.1' imports: #('0.1-baseline')>	spec		for: #'pharo3.x'		do: [ 			spec				blessing: #stable;				author: 'sebastianconcept';				repository: 'gitfiletree://github.com/sebastianconcept/Aggregate.git?protocol=git&readOnly=1&branch=Pharo3.0';				description: 'Aggregate is a small persistance framework with a clean API that uses OmniBase as backend.'.			spec package: 'Aggregate' with: 'Aggregate-sebastiansastre.8' ]! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ConfigurationOfAggregate class	instanceVariableNames: ''!!ConfigurationOfAggregate class commentStamp: '<historical>' prior: 0!!!ConfigurationOfAggregate class methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!project	^self new project! !!ConfigurationOfAggregate class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfAggregate class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfAggregate class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfAggregate class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 3/4/2014 10:47'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 11:56'!catalogKeywords	^ #(#Database #Persistence)! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:54'!catalogDescription	^ 'OmniBase is a Smalltalk efficient object repository based on BTrees and filesystem with full ACID features.'! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 11:56'!catalogKeyClassesAndExample	^ 'OmniBase:http://www.slideshare.net/esug/omni-baseobjectdatabase'! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:52'!catalogChangeLog	^ 'Date: March 4, 2014First OmniBase configuration using github'! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:54'!catalogContactInfo	^ 'https://github.com/sebastianconcept'! !!ConfigurationOfAggregate class methodsFor: 'loading' stamp: 'sebastiansastre 3/4/2014 10:47'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfAggregate class methodsFor: 'loading' stamp: 'sebastiansastre 3/4/2014 10:47'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfAggregate class methodsFor: 'gitfiletree support' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureGitFileTree	"And all related dependencies."	Smalltalk		at: #MCFileTreeGitRepository		ifAbsent: [ 			Gofer new				url: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo30/main';				configurationOf: 'GitFileTree';				loadDevelopment ]! !!ConfigurationOfAggregate class methodsFor: 'development support' stamp: 'sebastiansastre 3/4/2014 10:47'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfAggregate class methodsFor: 'development support' stamp: 'sebastiansastre 3/4/2014 10:47'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !!ConfigurationOfAggregate class methodsFor: 'accessing' stamp: 'sebastiansastre 3/4/2014 10:47'!project	^self new project! !!ConfigurationOfAggregate class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureMetacello	(self baseConfigurationClassIfAbsent: []) ensureMetacello! !!ConfigurationOfAggregate class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!baseConfigurationClassIfAbsent: aBlock	^Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			self ensureMetacelloBaseConfiguration.			Smalltalk at: #MetacelloBaseConfiguration ifAbsent: aBlock ].! !!ConfigurationOfAggregate class methodsFor: 'private' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureMetacelloBaseConfiguration	Smalltalk		at: #MetacelloBaseConfiguration		ifAbsent: [ 			| repository version |			repository := MCHttpRepository location: 'http://seaside.gemstone.com/ss/metacello' user: '' password: ''.			repository				versionReaderForFileNamed: 'Metacello-Base-DaleHenrichs.2.mcz'				do: [ :reader | 					version := reader version.					version load.					version workingCopy repositoryGroup addRepository: repository ] ]! !!ConfigurationOfAggregate class methodsFor: 'metacello tool support' stamp: 'sebastiansastre 3/4/2014 10:47'!isMetacelloConfig	"Answer true and the Metacello tools will operate on you"		^true! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 11:56'!catalogKeywords	^ #(#Database #Persistence)! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:54'!catalogDescription	^ 'OmniBase is a Smalltalk efficient object repository based on BTrees and filesystem with full ACID features.'! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 11:56'!catalogKeyClassesAndExample	^ 'OmniBase:http://www.slideshare.net/esug/omni-baseobjectdatabase'! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:52'!catalogChangeLog	^ 'Date: March 4, 2014First OmniBase configuration using github'! !!ConfigurationOfAggregate class methodsFor: 'catalog' stamp: 'sebastiansastre 3/4/2014 10:54'!catalogContactInfo	^ 'https://github.com/sebastianconcept'! !!ConfigurationOfAggregate class methodsFor: 'loading' stamp: 'sebastiansastre 3/4/2014 10:47'!load	"Load the #stable version defined for this platform. The #stable version is the version that is recommended to be used on this platform."	"self load"	<apiDocumentation>	^(self project version: #stable) load! !!ConfigurationOfAggregate class methodsFor: 'loading' stamp: 'sebastiansastre 3/4/2014 10:47'!loadDevelopment	"Load the #development version defined for this platform. The #development version will change over time and is not expected to be stable."	"self loadDevelopment"	<apiDocumentation>	^(self project version: #development) load! !!ConfigurationOfAggregate class methodsFor: 'gitfiletree support' stamp: 'sebastiansastre 3/4/2014 10:47'!ensureGitFileTree	"And all related dependencies."	Smalltalk		at: #MCFileTreeGitRepository		ifAbsent: [ 			Gofer new				url: 'http://smalltalkhub.com/mc/Pharo/MetaRepoForPharo30/main';				configurationOf: 'GitFileTree';				loadDevelopment ]! !!ConfigurationOfAggregate class methodsFor: 'development support' stamp: 'sebastiansastre 3/4/2014 10:47'!DevelopmentSupport"See the methods in the 'development support' category on the class-side of MetacelloBaseConfiguration. Decide what development support methods you would like to use and copy them the the class-side of your configuration."	<apiDocumentation>! !!ConfigurationOfAggregate class methodsFor: 'development support' stamp: 'sebastiansastre 3/4/2014 10:47'!validate	"Check the configuration for Errors, Critical Warnings, and Warnings (see class comment for MetacelloMCVersionValidator for more information). 	Errors identify specification issues that will result in unexpected behaviour when you load the configuration. 	Critical Warnings identify specification issues that may result in unexpected behavior when you load the configuration.	Warnings identify specification issues that are technically correct, but are worth take a look at."	"self validate"	<apiDocumentation>	self ensureMetacello.	^ ((Smalltalk at: #MetacelloToolBox) validateConfiguration: self debug: #() recurse: false) explore! !